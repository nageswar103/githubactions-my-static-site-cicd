name: CI/CD Static Website with ECR

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted  # ✅ custom runner
    env:   # ✅ make vars available to all steps
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPO: ${{ secrets.ECR_REPO }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS Account ID
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          echo "ECR_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:latest" >> $GITHUB_ENV

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPO --region $AWS_REGION || \
          aws ecr create-repository --repository-name $ECR_REPO --region $AWS_REGION

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
              | sudo docker login --username AWS --password-stdin $ECR_REPO

      - name: Build, Tag, and Push Docker image
        run: |
          echo "Using image URI: $ECR_URI"

          # Build local image
          sudo docker build -t static-website .

          # Tag for ECR
          sudo docker tag static-website:latest $ECR_URI

          # Push to ECR
          sudo docker push $ECR_URI
